AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: MWAAEnvironment

  CuratedDB:
    Type: String
    MinLength: "4"
    Default: "curated_db"

  VpcCIDR:
    Description: The IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24
  PrivateSubnet2CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
  MinWorkerNodes:
    Description: The minimum number of workers that can run in the environment
    Type: Number
    Default: 2
  MaxWorkerNodes:
    Description: The maximum number of workers that can run in the environment
    Type: Number
    Default: 10
  EnvironmentSize:
    Description: The size of the environment
    Type: String
    Default: mw1.medium
  DagProcessingLogs:
    Description: Log level for DagProcessing
    Type: String
    Default: INFO
  SchedulerLogsLevel:
    Description: Log level for SchedulerLogs
    Type: String
    Default: INFO
  TaskLogsLevel:
    Description: Log level for TaskLogs
    Type: String
    Default: INFO
  WorkerLogsLevel:
    Description: Log level for WorkerLogs
    Type: String
    Default: INFO
  WebserverLogsLevel:
    Description: Log level for WebserverLogs
    Type: String
    Default: INFO

Resources:
  #####################################################################################################################
  # CREATE VPC
  #####################################################################################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MWAAEnvironment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MWAAEnvironment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "mwaa-security-group"
      GroupDescription: "Security group with a self-referencing inbound rule."
      VpcId: !Ref VPC

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroup

  MWAAEnvironmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  artifactBucket:
    Type: 'AWS::S3::Bucket'

  EC2DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS

  DHCPAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref EC2DHCPOptions

  RDSDBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
      Tags:
        -
          Key: Name
          Value: RDSDBSG-SG

  SGIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSDBSG
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref RDSDBSG

  SGIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSDBSG
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref SecurityGroup

  RDSDDB:
    Type: AWS::RDS::DBInstance
    DependsOn: DefaultPublicRoute
    Properties:
      AllocatedStorage: '500'
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      DBInstanceClass: db.t2.2xlarge
      DBInstanceIdentifier: postgreinstance
      Port: '5432'
      PubliclyAccessible: true
      StorageType: gp2
      BackupRetentionPeriod: 7
      MasterUsername: adminuser
      MasterUserPassword: admin123
      PreferredBackupWindow: 04:00-04:30
      PreferredMaintenanceWindow: sun:05:20-sun:05:50
      DBName: sportstickets
      Engine: postgres
      EngineVersion: '11.20'
      LicenseModel: postgresql-license
      DBSubnetGroupName: !Ref RDSDefaultDBSubnet
      VPCSecurityGroups:
        - !Ref RDSDBSG
      Tags:
        -
          Key: workload-type
          Value: other
  RDSDefaultDBSubnet:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Created from the RDS Management Console
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  #####################################################################################################################
  # CREATE MWAA
  #####################################################################################################################

  MwaaEnvironment:
    Type: AWS::MWAA::Environment
    DependsOn: MwaaExecutionPolicy
    Properties:
      AirflowConfigurationOptions:
        core.dags_are_paused_at_creation: 'False'
        scheduler.catchup_by_default: 'False'
        webserver.warn_deployment_exposure: 'False'
        secrets.backend: >-
          airflow.providers.amazon.aws.secrets.secrets_manager.SecretsManagerBackend
        secrets.backend_kwargs: >-
          {"connections_prefix" : "airflow/connections", "variables_prefix" : "airflow/variables", 
          "variables_lookup_pattern" : "", "connections_lookup_pattern" : "",
          "config_prefix" : "airflow/config", "config_lookup_pattern" : " "}        
      AirflowVersion: 2.7.2   
      Name: !Sub "${AWS::StackName}-MwaaEnvironment"
      SourceBucketArn: !GetAtt MWAAEnvironmentBucket.Arn
      ExecutionRoleArn: !GetAtt MwaaExecutionRole.Arn
      DagS3Path: dags
      NetworkConfiguration:
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      WebserverAccessMode: PUBLIC_ONLY
      EnvironmentClass: !Ref EnvironmentSize
      MinWorkers: !Ref MinWorkerNodes
      MaxWorkers: !Ref MaxWorkerNodes
      LoggingConfiguration:
        DagProcessingLogs:
          LogLevel: !Ref DagProcessingLogs
          Enabled: true
        SchedulerLogs:
          LogLevel: !Ref SchedulerLogsLevel
          Enabled: true
        TaskLogs:
          LogLevel: !Ref TaskLogsLevel
          Enabled: true
        WorkerLogs:
          LogLevel: !Ref WorkerLogsLevel
          Enabled: true
        WebserverLogs:
          LogLevel: !Ref WebserverLogsLevel
          Enabled: true
          
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub "Security Group for Amazon MWAA Environment ${AWS::StackName}-MwaaEnvironment"
      GroupName: !Sub "airflow-security-group-${AWS::StackName}-MwaaEnvironment"
  
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1"
      CidrIp: "0.0.0.0/0"

  MwaaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - airflow-env.amazonaws.com
                - airflow.amazonaws.com
            Action:
             - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess

  MwaaExecutionPolicy:
    DependsOn: MWAAEnvironmentBucket
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MwaaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: airflow:PublishMetrics
            Resource:
              - !Sub "arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/${EnvironmentName}"
          - Effect: Deny
            Action: s3:ListAllMyBuckets
            Resource:
              - !Sub "${MWAAEnvironmentBucket.Arn}"
              - !Sub "${MWAAEnvironmentBucket.Arn}/*"
              - !Sub "${artifactBucket.Arn}"
              - !Sub "${artifactBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:GetObject*"
              - "s3:GetBucket*"
              - "s3:List*"
            Resource:
              - !Sub "${MWAAEnvironmentBucket.Arn}"
              - !Sub "${MWAAEnvironmentBucket.Arn}/*"
              - !Sub "${artifactBucket.Arn}"
              - !Sub "${artifactBucket.Arn}/*"              
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
            Resource: "*"

          - Effect: Allow
            Action:
              - "glue:*"
              - "athena:*"
              - "s3:*"
              - "logs:*"
            Resource: "*"

          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
            Resource: "*"


          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:GetLogEvents
              - logs:GetLogRecord
              - logs:GetLogGroupFields
              - logs:GetQueryResults
              - logs:DescribeLogGroups
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:airflow-${AWS::StackName}*"
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:*:airflow-celery-*"
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:ListSecrets
            Resource: "*"
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - "kms:GenerateDataKey*"
              - kms:Encrypt
            NotResource: !Sub "arn:aws:kms:*:${AWS::AccountId}:key/*"
            Condition:
              StringLike:
                "kms:ViaService":
                  - !Sub "sqs.${AWS::Region}.amazonaws.com"
  PostgresConnectionSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: MWAA Postgres Connection
      Name: airflow/connections/postgres_default
      SecretString: !Sub "postgres://adminuser:admin123@${RDSDDB.Endpoint.Address}:5432/sportstickets"

  ArtifactBucketSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: MWAA Artifact Bucket
      Name: airflow/variables/artifact_bucket
      SecretString: !Sub "${artifactBucket}"

  GlueConnection:
    Type: AWS::Glue::Connection
    Properties: 
      CatalogId: !Ref AWS::AccountId
      ConnectionInput: 
        ConnectionProperties: 
          JDBC_CONNECTION_URL: !Sub "jdbc:postgresql://${RDSDDB.Endpoint.Address}:5432/sportstickets"
          USERNAME: "adminuser"
          PASSWORD: "admin123"
          JDBC_ENFORCE_SSL: False
        ConnectionType: JDBC
        PhysicalConnectionRequirements: 
          AvailabilityZone: !GetAtt PublicSubnet1.AvailabilityZone
          SecurityGroupIdList: 
            - !Ref RDSDBSG
          SubnetId: !Ref PublicSubnet1
        Name: rds-pg

  EndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds: [!Ref PublicRouteTable, !Ref PrivateRouteTable1, !Ref PrivateRouteTable2]
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
  
  EndpointGlue:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      SecurityGroupIds: [!Ref RDSDBSG, !Ref SecurityGroup]
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.glue'
      PrivateDnsEnabled: true
      SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  EndpointGlueMonitoring:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      SecurityGroupIds: [!Ref RDSDBSG, !Ref SecurityGroup]
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
      PrivateDnsEnabled: true
      SubnetIds: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      VpcEndpointType: Interface
      VpcId: !Ref VPC

  AWSGlueJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "${artifactBucket.Arn}"
                  - !Sub "${artifactBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - "logs:*"
                  - "glue:*"
                  - "rds:*"
                  - "ec2:*"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Path: "/"


  CuratedDatabase:
    Type: "AWS::Glue::Database"
    Properties:
      DatabaseInput:
        Name: !Ref CuratedDB
      CatalogId: !Ref AWS::AccountId


  CuratedCrawler:
    Type: 'AWS::Glue::Crawler'
    DependsOn:
      - CuratedDatabase
      - AWSGlueJobRole
      - artifactBucket
    Properties:
      Name: curated_layer_crawler
      Role: !GetAtt AWSGlueJobRole.Arn
      DatabaseName: !Ref CuratedDatabase
      Targets:
        S3Targets:
          - Path: !Sub 's3://${artifactBucket}/curated/'
      SchemaChangePolicy:
        UpdateBehavior: "UPDATE_IN_DATABASE"
        DeleteBehavior: "LOG"
      
  IngestRDSData:
    Type: "AWS::Glue::Job"
    DependsOn:
      - AWSGlueJobRole
      - artifactBucket
      - GlueConnection
    Properties:
      Role: !Ref AWSGlueJobRole
      Name: "ingest_rds_data"
      Command: {
        "Name" : "glueetl",
        "ScriptLocation": !Sub "s3://${artifactBucket}/gluescripts/ingest_rds_data.py"
      }
      DefaultArguments: {
          "--table_name" : "sporting_event_ticket",
          "--bucket_name" : !Sub "${artifactBucket}"
      }
      MaxRetries: 0
      Connections:
        Connections: 
          - 'rds-pg' 
      GlueVersion: 4.0
      AllocatedCapacity: 5
      ExecutionProperty:
        MaxConcurrentRuns: 20

  Converttoparquet:
    Type: "AWS::Glue::Job"
    DependsOn:
      - AWSGlueJobRole
      - artifactBucket
    Properties:
      Role: !Ref AWSGlueJobRole
      Name: "convert_to_parquet"
      Command: {
        "Name" : "glueetl",
        "ScriptLocation": !Sub "s3://${artifactBucket}/gluescripts/convert_to_parquet.py"
      }
      DefaultArguments: {
          "--table_name" : "sporting_event_ticket",
          "--bucket_name" : !Sub "${artifactBucket}"
      }
      MaxRetries: 0
      GlueVersion: 4.0
      AllocatedCapacity: 5
      ExecutionProperty:
        MaxConcurrentRuns: 20


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  SecurityGroupIngress:
    Description: Security group with self-referencing inbound rule
    Value: !Ref SecurityGroupIngress

  MwaaApacheAirflowUI:
    Description: MWAA Environment
    Value: !Sub  "https://${MwaaEnvironment.WebserverUrl}"

  RDSInstanceEndpoint:
    Description: DMS Instance Endpoint
    Value: !GetAtt RDSDDB.Endpoint.Address

  MWAAEnvironmentBucket:
    Description: Name of the MWAA Env bucket
    Value: !Ref MWAAEnvironmentBucket

  artifactBucket:
    Description: Name of the data and metadata aretfact bucket
    Value: !Ref artifactBucket

  MWAAIAMRoleArn:
    Description: MWAA Role Arn
    Value: !GetAtt MwaaExecutionRole.Arn
